/*
** EPITECH PROJECT, 2020
** common/include/events/UserEvent
** File description:
** DO NOT EDIT THIS FILE MANUALLY
*/

#ifndef USEREVENT_HPP_
#define USEREVENT_HPP_

#include "AMessage.hpp"
#include "User.hpp"
#include "User.hpp"
#include "User.hpp"
#include "User.hpp"
#include "User.hpp"

namespace babel {
    namespace events {
        /// \brief UserEvent
        class UserEvent : public AMessage {
            public:
                /// \brief Dummy constructor (for serialize)
                UserEvent();

                /// \brief Constructor of UserEvent class
                UserEvent(babel::User::Id userId,babel::User::Name username,babel::User::Avatar avatar,babel::User::Status status,babel::User::Visibility visibility);

                /// \brief Deconstructor of UserEvent
                ~UserEvent() = default;

                /// \brief Getter for UserId
                babel::User::Id getUserId() const;

                /// \brief Getter for Username
                babel::User::Name getUsername() const;

                /// \brief Getter for Avatar
                babel::User::Avatar getAvatar() const;

                /// \brief Getter for Status
                babel::User::Status getStatus() const;

                /// \brief Getter for Visibility
                babel::User::Visibility getVisibility() const;

                template<class Archive>
                void serialize(Archive &ar, const unsigned int)
                {
                    ar & _userId;
                    ar & _username;
                    ar & _avatar;
                    ar & _status;
                    ar & _visibility;
                }

            private:
                babel::User::Id _userId;
                babel::User::Name _username;
                babel::User::Avatar _avatar;
                babel::User::Status _status;
                babel::User::Visibility _visibility;
        };
    }
}

#endif
