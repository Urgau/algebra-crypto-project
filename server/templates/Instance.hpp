/*
** EPITECH PROJECT, 2020
** server/include/Instance
** File description:
** DO NOT EDIT THIS FILE MANUALLY
*/

#ifndef INSTANCE_HPP_
#define INSTANCE_HPP_

#include <set>
#include <string>
#include "Error.hpp"
#include "Session.hpp"
#include "Proxy.hpp"
#include "Room.hpp"

##HANDLERS_HEADERS##

// NOTE: need to be sync with NetworkVoice.hpp
#define LOCAL_AUDIO_PORT 7755
#define DATABASE_PATH ".babel.db"

namespace babel {

    /// \brief Instance is the big class where everything is hold
    class Instance {
        public:
            /// \brief Constructor
            Instance();

            /// \brief Destructor
            ~Instance();

            /// \brief Add session to the list
            void join(SessionPtr sessionPtr);

            /// \brief Remove session from the list
            void leave(SessionPtr sessionPtr);

            /// \brief Register a proxy for use
            void join(ProxyPtr proxyPtr);

            /// \brief Handle command from session
            void handleCommand(SessionPtr sessionPtr, std::istream &input) noexcept(true);
        private:
##HANDLERS_FUNCTIONS##

        private:
            /// \brief Notify all session that user have changed
            void notifyUserChangeToUsers(const User &user, User::Status status = User::Status::Online);

            /// \brief Send list of users to the session
            void sendUsersList(SessionPtr session, std::size_t maxUsers = -1);

            /// \brief Send message "from/to"
            template<class M>
            bool sendMessageFromTo(User::Id fromUserId, User::Id toUserId, const M &m)
            {
                bool found = false;

                for (const SessionPtr &session : this->_sessions) {
                    if (session->hasUser() &&
                            session->getUser() == toUserId) {
                        this->serializeAndSend(session, m);
                        found = true;
                    }
                }

                if (found) {
                    for (const SessionPtr &session : this->_sessions) {
                        if (session->hasUser() &&
                                session->getUser() == fromUserId)
                            this->serializeAndSend(session, m);
                    }
                }
                return (found);
            }

        private:
            std::set<RoomPtr> _rooms;
            std::set<SessionPtr> _sessions;
            std::map<User::Id, User> _users;
    };
}

#endif
