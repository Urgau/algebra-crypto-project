/*
** EPITECH PROJECT, 2020
** common/include/events/MessageEvent
** File description:
** DO NOT EDIT THIS FILE MANUALLY
*/

#ifndef MESSAGEEVENT_HPP_
#define MESSAGEEVENT_HPP_

#include "AMessage.hpp"
#include "User.hpp"
#include "User.hpp"
#include "Message.hpp"
#include "Message.hpp"

namespace babel {
    namespace events {
        /// \brief MessageEvent
        class MessageEvent : public AMessage {
            public:
                /// \brief Dummy constructor (for serialize)
                MessageEvent();

                /// \brief Constructor of MessageEvent class
                MessageEvent(babel::User::Id fromUserId,babel::User::Id toUserId,babel::Message::Timestamp timestamp,babel::Message::Body body);

                /// \brief Deconstructor of MessageEvent
                ~MessageEvent() = default;

                /// \brief Getter for FromUserId
                babel::User::Id getFromUserId() const;

                /// \brief Getter for ToUserId
                babel::User::Id getToUserId() const;

                /// \brief Getter for Timestamp
                babel::Message::Timestamp getTimestamp() const;

                /// \brief Getter for Body
                babel::Message::Body getBody() const;

                template<class Archive>
                void serialize(Archive &ar, const unsigned int)
                {
                    ar & _fromUserId;
                    ar & _toUserId;
                    ar & _timestamp;
                    ar & _body;
                }

            private:
                babel::User::Id _fromUserId;
                babel::User::Id _toUserId;
                babel::Message::Timestamp _timestamp;
                babel::Message::Body _body;
        };
    }
}

#endif
