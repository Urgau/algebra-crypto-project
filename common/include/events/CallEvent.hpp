/*
** EPITECH PROJECT, 2020
** common/include/events/CallEvent
** File description:
** DO NOT EDIT THIS FILE MANUALLY
*/

#ifndef CALLEVENT_HPP_
#define CALLEVENT_HPP_

#include "AMessage.hpp"
#include "User.hpp"
#include "User.hpp"
#include "Net.hpp"
#include "Net.hpp"
#include <string>

namespace babel {
    namespace events {
        /// \brief CallEvent
        class CallEvent : public AMessage {
            public:
                /// \brief Dummy constructor (for serialize)
                CallEvent();

                /// \brief Constructor of CallEvent class
                CallEvent(babel::User::Id fromUserId,babel::User::Id toUserId,babel::net::Ip ip,babel::net::Port port,std::string password);

                /// \brief Deconstructor of CallEvent
                ~CallEvent() = default;

                /// \brief Getter for FromUserId
                babel::User::Id getFromUserId() const;

                /// \brief Getter for ToUserId
                babel::User::Id getToUserId() const;

                /// \brief Getter for Ip
                babel::net::Ip getIp() const;

                /// \brief Getter for Port
                babel::net::Port getPort() const;

                /// \brief Getter for Password
                std::string getPassword() const;

                template<class Archive>
                void serialize(Archive &ar, const unsigned int)
                {
                    ar & _fromUserId;
                    ar & _toUserId;
                    ar & _ip;
                    ar & _port;
                    ar & _password;
                }

            private:
                babel::User::Id _fromUserId;
                babel::User::Id _toUserId;
                babel::net::Ip _ip;
                babel::net::Port _port;
                std::string _password;
        };
    }
}

#endif
